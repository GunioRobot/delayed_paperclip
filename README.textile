h1. Delayed::Paperclip

Delayed_paperclip lets you process your "Paperclip":http://github.com/thoughtbot/paperclip attachments in a background task with "delayed_job":http://github.com/tobi/delayed_job or "Resque":http://github.com/defunkt/resque.

h2. Why?

The most common use case for Paperclip is to easily attach image files to ActiveRecord models. Most of the time these image files will have multiple styles and will need to be resized when they are created. This is usually a pretty "slow operation":http://www.jstorimer.com/ruby/2010/01/05/speep-up-your-paperclip-tests.html and should be handled in a background task. 

I'm sure that everyone knows this, this gem just makes it easy to do.

h2. Installation

Install the gem:

<pre><code>sudo gem install delayed_paperclip</code></pre>

Add it to your environment.rb:

<pre><code>config.gem 'delayed_paperclip'</code></pre>

Or, even better, to your Gemfile:

<pre><code>source "http://gemcutter.org"
gem 'delayed_paperclip'
</code></pre>

Or install as a rails plugin:

<pre><code>script/plugin install git://github.com/jstorimer/delayed_paperclip.git</code></pre>

Dependencies:
* Paperclip
* DJ or Resque

h2. Usage

In your model:

<pre><code>
  class User < ActiveRecord::Base
    has_attached_file :avatar, :styles => { :medium => "300x300>", :thumb => "100x100>" }
    
    process_in_background :avatar
  end  
</code></pre>

Use your Paperclip attachment just like always in controllers and views.

h3. Resque

Make sure that you have "Resque":http://github.com/defunkt/resque up and running.  The jobs will be dispatched to the <code>:paperclip</code> queue, so you can correctly dispatch your worker.  Configure resque and your worker exactly as you would otherwise.

h3. DJ

Just make sure that you have DJ up and running.

h2. What if I'm not using images?

AFAIK this library should work no matter what kind of post-processing you are doing with Paperclip.

h2. Does it work with s3?

Yes.